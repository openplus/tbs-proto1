diff --git a/ctools.services.yml b/ctools.services.yml
index 59f91f9..b9461e7 100644
--- a/ctools.services.yml
+++ b/ctools.services.yml
@@ -31,6 +31,11 @@ services:
   ctools.context_mapper:
     class: Drupal\ctools\ContextMapper
     arguments: ['@entity.repository']
+  ctools.entity_route_context:
+    class: Drupal\ctools\ContextProvider\EntityRouteContext
+    arguments: ['@current_route_match', '@entity_type.manager']
+    tags:
+      - { name: 'context_provider' }
   ctools.serializable.tempstore.factory:
     class: Drupal\ctools\SerializableTempstoreFactory
     arguments: ['@keyvalue.expirable', '@lock', '@request_stack', '%tempstore.expire%', '@current_user']
diff --git a/src/ContextProvider/EntityRouteContext.php b/src/ContextProvider/EntityRouteContext.php
new file mode 100644
index 0000000..2666ccb
--- /dev/null
+++ b/src/ContextProvider/EntityRouteContext.php
@@ -0,0 +1,85 @@
+<?php
+
+namespace Drupal\ctools\ContextProvider;
+
+use Drupal\Core\Cache\CacheableMetadata;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Plugin\Context\Context;
+use Drupal\Core\Plugin\Context\ContextDefinition;
+use Drupal\Core\Plugin\Context\ContextProviderInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\StringTranslation\StringTranslationTrait;
+
+/**
+ * Sets the current entity as a context on their equivalent routes.
+ */
+class EntityRouteContext implements ContextProviderInterface {
+
+  use StringTranslationTrait;
+
+  /**
+   * The route match object.
+   *
+   * @var \Drupal\Core\Routing\RouteMatchInterface
+   */
+  protected $routeMatch;
+
+  /**
+   * Entity Type manager service.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
+  /**
+   * Constructs a new EntityRouteContext.
+   *
+   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   *   The route match object.
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   Entity type manager service.
+   */
+  public function __construct(RouteMatchInterface $route_match, EntityTypeManagerInterface $entity_type_manager) {
+    $this->routeMatch = $route_match;
+    $this->entityTypeManager = $entity_type_manager;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getRuntimeContexts(array $unqualified_context_ids) {
+    $result = [];
+    foreach ($this->entityTypeManager->getDefinitions() as $entity_type_id => $entity_type) {
+      $value = NULL;
+      $context_definition = new ContextDefinition('entity:' . $entity_type_id, NULL, FALSE);
+      if (($route_object = $this->routeMatch->getRouteObject()) && ($route_contexts = $route_object->getOption('parameters')) && isset($route_contexts[$entity_type_id])) {
+        if ($entity = $this->routeMatch->getParameter($entity_type_id)) {
+          $value = $entity;
+        }
+      }
+
+      $cacheability = new CacheableMetadata();
+      $cacheability->setCacheContexts(['route']);
+
+      $context = new Context($context_definition, $value);
+      $context->addCacheableDependency($cacheability);
+      $result[$entity_type_id] = $context;
+    }
+
+    return $result;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getAvailableContexts() {
+    $contexts = [];
+    foreach ($this->entityTypeManager->getDefinitions() as $entity_type_id => $entity_type) {
+      $contexts[$entity_type_id] = new Context(new ContextDefinition('entity:' . $entity_type_id, $this->t('@label from URL', [
+        '@label' => $entity_type->getLabel(),
+      ])));
+    }
+    return $contexts;
+  }
+
+}
diff --git a/src/Plugin/Deriver/EntityBundle.php b/src/Plugin/Deriver/EntityBundle.php
index 1adf705..1ee5271 100644
--- a/src/Plugin/Deriver/EntityBundle.php
+++ b/src/Plugin/Deriver/EntityBundle.php
@@ -17,7 +17,7 @@ class EntityBundle extends EntityDeriverBase {
       if ($entity_type->hasKey('bundle')) {
         $this->derivatives[$entity_type_id] = $base_plugin_definition;
         $this->derivatives[$entity_type_id]['label'] = $this->getEntityBundleLabel($entity_type);
-        $this->derivatives[$entity_type_id]['context'] = [
+        $this->derivatives[$entity_type_id]['context_definitions'] = [
           "$entity_type_id" => new ContextDefinition('entity:' . $entity_type_id),
         ];
       }
