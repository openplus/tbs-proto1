<?php

/**
 * @file
 * Module file for the Password Policy module.
 */

use Drupal\password_policy\Entity\PasswordPolicy;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;

/**
 * Implements hook_form_FORM_ID_alter() for user_form().
 */
function password_policy_form_user_form_alter(&$form, &$form_state) {

  // Hide password reset field if no access.
  $account = \Drupal::currentUser();
  if (!$account->hasPermission('manage password reset')) {
    $form['field_last_password_reset']['#access'] = FALSE;
    $form['field_password_expiration']['#access'] = FALSE;
  }

  // TODO - Password editing of existing account is broken, AJAX reloads
  // current password and password multiple times
  // user interface changes
  // TODO - Consider hiding Password Strength indicator and Password
  // Recommendations.
  $form['account']['roles']['#weight'] = '0';
  $form['account']['mail']['#weight'] = '1';
  $form['account']['name']['#weight'] = '2';
  $form['account']['status']['#weight'] = '5';
  $form['account']['notify']['#weight'] = '6';
  $form['account']['pass']['#weight'] = '3';

  // Check for specific conditions.
  $show_password_policy_status = _password_policy_show_policy();

  // Load form if relevant.
  if ($show_password_policy_status) {
    $form['account']['password_policy_status'] = [
      '#title' => 'Password policies',
      '#type' => 'table',
      '#header' => [t('Policy'), t('Status'), t('Constraint')],
      '#empty' => t('There are no constraints for the selected user roles'),
      '#weight' => '4',
      '#prefix' => '<div id="password-policy-status">',
      '#suffix' => '</div>',
      '#rows' => _password_policy_constraints_table($form, $form_state),
    ];

    // Set ajax changes.
    $form['account']['roles']['#ajax'] = [
      'event' => 'change',
      'callback' => '_password_policy_check_constraints',
      'method' => 'replace',
      'wrapper' => 'password-policy-status',
    ];

    $form['#validate'][] = '_password_policy_user_profile_form_validate';
  }

  // Add the submit handler.
  $form['actions']['submit']['#submit'][] = '_password_policy_user_profile_form_submit';
}

/**
 * Implements hook_element_info_alter().
 */
function password_policy_element_info_alter(array &$types) {
  if (isset($types['password_confirm'])) {
    $types['password_confirm']['#process'][] = 'password_policy_check_constraints_password_confirm_process';
  }
}

/**
 * Determine if the password policy should be shown.
 *
 * @return bool
 *   Result of whether the password policy should be shown.
 */
function _password_policy_show_policy() {
  $account = \Drupal::currentUser();
  $config = \Drupal::config('user.settings');
  $show_password_policy_status = TRUE;

  if ($account->hasPermission('bypass password policies')) {
    $show_password_policy_status = FALSE;
  }

  if ($account->isAnonymous() and $config->get('verify_mail')) {
    $show_password_policy_status = FALSE;
  }
  return $show_password_policy_status;
}

/**
 * Custom callback to update the password confirm element.
 *
 * @param mixed $element
 *   Form element of the password confirm form field.
 *
 * @return mixed
 *   Updated form field element.
 */
function password_policy_check_constraints_password_confirm_process($element) {
  if (_password_policy_show_policy()) {
    $element['pass1']['#ajax'] = [
      'event' => 'change',
      'callback' => '_password_policy_check_constraints',
      'method' => 'replace',
      'wrapper' => 'password-policy-status',
      'disable-refocus' => TRUE,
    ];
  }

  return $element;
}

/**
 * Check if password policies failed.
 *
 * @param mixed $form
 *   Form definition for the user profile form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state of the user profile form.
 *
 * @return bool
 *   Whether or not the password passes the user's constraints.
 */
function _password_policy_user_profile_form_validate(&$form, FormStateInterface &$form_state) {

  return _password_policy_constraints_validate($form, $form_state);
}

/**
 * Validate password policy constraints and generate table if required.
 *
 * @param mixed $form
 *   Form definition to process the password.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state of the form that contains the password.
 * @param bool $generate_policy_table
 *   Set this to true if you want to generate policy table on user form.
 * @param mixed $policies_table_rows
 *   Variable which holds applicable policies in array format.
 *
 * @return bool|mixed
 *   Boolean if the password passes/fails or a detailed listing of failures.
 */
function _password_policy_constraints_validate(&$form, FormStateInterface &$form_state, $generate_policy_table = FALSE, &$policies_table_rows = []) {
  $config = \Drupal::config('user.settings');

  // When user email verification is enabled Drupal doesn't allow setting
  // password on registration. The Drupal generated password will not always
  // meet the applicable policies in place. In that scenario the password
  // validation should be skipped. The user will have to set a password
  // after clicking the one-time login link instead.
  if ($form['#form_id'] == 'user_register_form' && $config->get('verify_mail')) {
    if ($generate_policy_table) {
      return [];
    }
    return TRUE;
  }

  $expiration = $form_state->getValue('field_password_expiration');
  if (!is_null($expiration) && $expiration['value'] === FALSE) {
    $form_state->setValue('field_password_expiration', ['value' => 0]);
  }

  $roles = $form_state->getValue('roles');
  if (empty($roles)) {
    // Get if from $form; form state is always empty the first time.
    $roles = $form['account']['roles']['#default_value'];
  }
  $roles = array_combine($roles, $roles);

  $original_roles = $form['account']['roles']['#default_value'];
  $original_roles = array_combine($original_roles, $original_roles);

  // Add user doesn't automatically register authenticated, so lets add it.
  if (empty($roles)) {
    $roles = ['authenticated' => 'authenticated'];
  }

  // Run validation.
  $applicable_policies = [];
  $ids = [];
  foreach ($roles as $role_key => $role_enabled) {
    if ($role_enabled) {
      $role_map = ['roles.' . $role_enabled => $role_enabled];
      $role_policies = \Drupal::entityTypeManager()->getStorage('password_policy')->loadByProperties($role_map);
      /** @var \Drupal\password_policy\Entity\PasswordPolicy $policy */
      foreach ($role_policies as $policy) {
        if (!in_array($policy->id(), $ids)) {
          $applicable_policies[] = $policy;
          $ids[] = $policy->id();
        }
      }
    }
  }

  // Force failure.
  $force_failure = FALSE;

  if ($roles != $original_roles && $form_state->getValue('pass') == '' && !empty($applicable_policies)) {
    // New role has been added and applicable policies are available.
    $force_failure = TRUE;
  }
  // Run validation.
  $failed = FALSE;

  // Process user context
  // TODO - Turn this into configuration.
  $user_context_fields = ['mail', 'name', 'uid'];
  $user_context_values = [];
  foreach ($user_context_fields as $user_context_field) {
    $user_context_values[$user_context_field] = $form_state->getValue($user_context_field);

    if ($user_context_field == 'uid') {
      $user_context_values[$user_context_field] = \Drupal::routeMatch()->getRawParameter('user');
    }
    // Check default value.
    if (empty($user_context_values[$user_context_field]) and !empty($form['account'][$user_context_field]['#default_value'])) {
      $user_context_values[$user_context_field] = $form['account'][$user_context_field]['#default_value'];
    }
  }
  /** @var \Drupal\password_policy\Entity\PasswordPolicy $policy */
  foreach ($applicable_policies as $policy_id => $policy) {
    $policy_constraints = $policy->getConstraints();

    foreach ($policy_constraints as $constraint_id => $constraint) {

      $plugin_inst = \Drupal::service('plugin.manager.password_policy.password_constraint');
      $plugin_object = $plugin_inst->createInstance($constraint['id'], $constraint);

      // Execute validation.
      $validation = $plugin_object->validate($form_state->getValue('pass'), $user_context_values);
      if ($generate_policy_table) {
        if ($validation->isValid() && !$force_failure) {
          $status = t('Pass');
        }
        else {
          $message = $validation->getErrorMessage();
          if (empty($message)) {
            $message = t('New role was added or existing password policy changed. Please update your password.');
          }
          $status = t('Fail - @message', ['@message' => $message]);
          // Throw error to ensure form will not submit.
          if (!$failed and $form_state->getValue('pass') != '') {
            // Set storage value since you cant throw errors here.
            $storage = $form_state->getStorage();
            $storage['password_fails_policies'] = TRUE;
            $form_state->setStorage($storage);
            $failed = TRUE;
          }
        }
        $table_row = [
          'policy' => $policy->label(),
          'status' => $status,
          'constraint' => $plugin_object->getSummary(),
        ];
        $policies_table_rows[] = $table_row;
      }
      else {
        if (!$validation->isValid() and !$failed and $form_state->getValue('pass') != '') {
          // Throw error to ensure form will not submit.
          $failed = TRUE;
        }
        elseif ($force_failure) {
          $failed = TRUE;
        }
      }
    }
  }
  if ($failed && !$generate_policy_table) {
    $form_state->setErrorByName('pass', t('The password does not satisfy the password policies.'));
  }
  if ($generate_policy_table) {
    return $policies_table_rows;
  }
  return $failed;

}

/**
 * Set last password reset and expiration fields on password update.
 */
function _password_policy_user_profile_form_submit(array &$form, FormStateInterface $form_state) {
  $current_pass = $form_state->getValue('current_pass');
  $new_pass = $form_state->getValue('pass');
  // get the uid from user object.
  $user = $form_state->getFormObject()->getEntity();
  $uid = $user->id();

  // Update if both current and new password fields are filled out.  Depending
  // on policy settings, user may be allowed to use same password again.
  if ($uid && $current_pass && $new_pass) {
    $date = date('Y-m-d\TH:i:s');
    $user->set('field_last_password_reset', $date);
    $user->set('field_password_expiration', '0');
    $user->save();
  }
}

/**
 * {@inheritdoc}
 */
function password_policy_user_presave(EntityInterface $entity) {

  if (!$entity->id()) {
    $date = date('Y-m-d\TH:i:s');
    $entity->set('field_last_password_reset', $date);
    $entity->set('field_password_expiration', '0');
  }
}

/**
 * AJAX callback for user form.
 */
function _password_policy_check_constraints($form, $form_state) {
  return $form['account']['password_policy_status'];
}

/**
 * AJAX callback for user form.
 */
function _password_policy_constraints_table($form, $form_state) {

  $policies_table_rows = [];
  _password_policy_constraints_validate($form, $form_state, TRUE, $policies_table_rows);

  return $policies_table_rows;

}

/**
 * Implements hook_cron().
 *
 * Looks for expired passwords and updates the expiration based on the policy
 * assigned.
 */
function password_policy_cron() {
  // Load each policy.
  $policies = \Drupal::entityTypeManager()->getStorage('password_policy')->loadMultiple();
  $current_time = time();

  /** @var \Drupal\password_policy\Entity\PasswordPolicy $policy */
  foreach ($policies as $policy) {
    // Check each policy configured w/ a password expiration > than 0 days.
    if ($policy->getPasswordReset() > 0) {
      // Load user roles for policy.
      $policy_roles = $policy->getRoles();

      // Determine date user accounts expired.
      $expire_timestamp = strtotime('-' . $policy->getPasswordReset() . ' days', $current_time);
      $expire_date = \Drupal::service('date.formatter')->format($expire_timestamp);

      // Configurable limit to users per policy per run, to prevent OOM errors.
      $threshold = \Drupal::config('password_policy.settings')->get('cron_threshold');

      // Get list of users based on conditionals from above.
      $query = \Drupal::entityQuery('user')
        ->condition('status', 1)
        ->condition('roles', $policy_roles, 'IN')
        ->condition('field_password_expiration', 0)
        ->condition('field_last_password_reset', $expire_date, '<=')
        ->condition('uid', 0, '>')
        ->range(0, $threshold);

      $valid_list = $query->execute();

      // Load User Objects.
      $users = \Drupal::entityTypeManager()
        ->getStorage('user')
        ->loadMultiple($valid_list);

      // Expire passwords.
      /** @var \Drupal\user\UserInterface $user */
      foreach ($users as $user) {
        $user->set('field_password_expiration', '1');
        $user->save();
      }
    }
  }
}

/**
 * Menu argument loader. Returns a password policy entity.
 *
 * @param string $id
 *   ID of the password policy entity.
 *
 * @return \Drupal\Core\Entity\EntityInterface
 *   Returns a password policy object.
 */
function password_policy_load($id) {
  return PasswordPolicy::load($id);
}
