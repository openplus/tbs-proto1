<?php

/**
 * @file
 * Install, update and uninstall functions for Consumers.
 */

use Drupal\consumers\Entity\Consumer;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_install().
 */
function consumers_install() {
  Consumer::create([
    'label' => 'Default Consumer',
    'description' => 'This is the default consumer. This was created programmatically when the Consumers module was first installed. Feel free to edit, or delete this.',
    'is_default' => TRUE,
  ])->save();
}

/**
 * Add field 'third_party' when not exist.
 */
function consumers_update_8101() {
  // Replaced by consumers_update_8102().
}


/**
 * Add field 'third_party' using the entity system.
 */
function consumers_update_8102() {
  $field_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(new TranslatableMarkup('Is this consumer 3rd party?'))
    ->setDescription(new TranslatableMarkup('Mark this if the organization behind this consumer is not the same as the one behind the Drupal API.'))
    ->setDisplayOptions('view', [
      'label' => 'inline',
      'type' => 'boolean',
      'weight' => 4,
    ])
    ->setDisplayOptions('form', [
      'weight' => 4,
    ])
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE)
    ->setDefaultValue(TRUE)
    // Explicitly initialue existing entities with TRUE, to ensure a consistent
    // consistent behavior.
    ->setInitialValue(TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('third_party', 'consumer', 'consumers', $field_definition);
}

/**
 * Make consumers translatable.
 */
function consumers_update_8103() {
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = $entity_definition_update_manager->getEntityType('consumer');
  $last_installed_field_storage_definitions = \Drupal::service('entity.last_installed_schema.repository')->getLastInstalledFieldStorageDefinitions('consumer');

  /** @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $storage */

  // Initialize the storage with the currently installed entity type and field storage definitions.
  $storage = \Drupal::entityTypeManager()->getStorage('consumer');
  $storage->setEntityType($entity_type);
  $storage->setTableMapping($storage->getTableMapping($last_installed_field_storage_definitions));

  // Load all consumers and convert them to raw arrays. The entity always loads the live field definitions, so we
  // have to explicitly unset the langcode and default_langcode keys so that it will create proper default values for
  // those.
  $consumers = array_map(function (Consumer $consumer) {
    $values = $consumer->toArray();
    unset($values['langcode'], $values['default_langcode']);
    return $values;
  }, $storage->loadMultiple());

  // Now, truncate the table to delete the data.
  \Drupal::database()->truncate('consumer')->execute();

  // Make the entity type translatable.
  $entity_type->set('translatable', TRUE);
  $entity_type->set('data_table', 'consumer_field_data');
  $keys = $entity_type->getKeys();
  $keys['langcode'] = 'langcode';
  $entity_type->set('entity_keys', $keys);

  $entity_definition_update_manager->updateEntityType($entity_type);

  // Create the new fields.
  $langcode_field = BaseFieldDefinition::create('language')
    ->setLabel(t('Language'))
    ->setDisplayOptions('view', [
      'region' => 'hidden',
    ])
    ->setDisplayOptions('form', [
      'type' => 'language_select',
      'weight' => 2,
    ])
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE);

  $default_langcode_field = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Default translation'))
    ->setDescription(t('A flag indicating whether this is the default translation.'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue(TRUE);

  $entity_definition_update_manager->installFieldStorageDefinition('langcode', $entity_type->id(), 'consumers', $langcode_field);
  $entity_definition_update_manager->installFieldStorageDefinition('default_langcode', $entity_type->id(), 'consumers', $default_langcode_field);

  // Resave all consumers, make sure they are treated as new entities and get the new default values and so on.
  foreach ($consumers as $values) {
    $new_consumer = Consumer::create($values);

    // Special handling for the secret field added by simple_oauth, make sure that it is not hashed again.
    if ($new_consumer->hasField('secret')) {
      $new_consumer->get('secret')->pre_hashed = TRUE;
    }

    $new_consumer->save();
  }

}

/**
 * Add field 'is_default'.
 */
function consumers_update_8104() {
  $field_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(new TranslatableMarkup('Is this the default consumer?'))
    ->setDescription(new TranslatableMarkup('There can only be one default consumer. Mark this to use this consumer when none other applies.'))
    ->setDisplayOptions('view', [
      'label' => 'inline',
      'type' => 'boolean',
      'weight' => 4,
    ])
    ->setDisplayOptions('form', [
      'weight' => 4,
    ])
    ->setRevisionable(TRUE)
    ->setTranslatable(TRUE)
    ->setDefaultValue(FALSE)
    ->setInitialValue(FALSE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('is_default', 'consumer', 'consumers', $field_definition);
}

/**
 * Create a default consumer.
 */
function consumers_update_8105() {
  Consumer::create([
    'label' => 'Default Consumer',
    'description' => 'This is the default consumer. This was created programmatically when the Consumers module was first installed. Feel free to edit, or delete this.',
    'is_default' => TRUE,
  ])->save();
}

/**
 * Update entity definition to add the "owner" key and adapt the field.
 */
function consumers_update_8106() {
  $edum = \Drupal::entityDefinitionUpdateManager();
  $entity_type = $edum->getEntityType('consumer');
  $keys = $entity_type->getKeys();
  $owner_key = 'owner_id';
  $entity_type->set('entity_keys', $keys + ['owner' => $owner_key]);
  $edum->updateEntityType($entity_type);
  $field_definition = BaseFieldDefinition::create('entity_reference')
    ->setLabel(new TranslatableMarkup('User ID'))
    ->setSetting('target_type', 'user')
    ->setTranslatable($entity_type->isTranslatable())
    ->setDefaultValueCallback(Consumer::class . '::getDefaultEntityOwner');
  $field_storage_definition = $field_definition
    ->getFieldStorageDefinition();
  $has_original = (bool) $edum->getFieldStorageDefinition(
    $field_storage_definition->getName(),
    $field_storage_definition->getTargetEntityTypeId()
  );
  $has_original
    ? $edum->updateFieldStorageDefinition($field_storage_definition)
    : $edum->installFieldStorageDefinition('owner_id', 'consumer', 'consumers', $field_definition);
}
